From 529d8e54756eadc4c6e892c5eb084ad829d9c13e Mon Sep 17 00:00:00 2001
From: "Alfred E. Heggestad" <alfred.heggestad@gmail.com>
Date: Fri, 30 Apr 2021 18:34:09 +0200
Subject: [PATCH 5/6] video passthrough (#1418)

original patch by:

 *     Media Magic Technologies <developer@mediamagictechnologies.com>
 *     and Divus GmbH <developer@divus.eu>

https://github.com/baresip/baresip/pull/1390

the patch was trimmed and improved by me.

Upstream-Status: Backport [https://github.com/baresip/baresip/commit/da90acc53b24d3f69ebde5075931220ef5968901]
Signed-off-by: Alexey Brodkin <alexey.brodkin@gmail.com>
---
 docs/examples/config            |  4 +++
 include/baresip.h               |  4 +++
 modules/avcodec/avcodec.c       |  1 +
 modules/avcodec/avcodec.h       |  1 +
 modules/avcodec/encode.c        | 48 +++++++++++++++++++++++++++++++++
 modules/avcodec/sdp.c           | 31 ++++++++++++++++++---
 modules/avformat/avformat.c     | 17 ++++++++++--
 modules/avformat/mod_avformat.h |  4 +++
 modules/avformat/video.c        | 29 ++++++++++++++++++++
 src/config.c                    |  1 +
 src/video.c                     | 39 ++++++++++++++++++++++++---
 11 files changed, 170 insertions(+), 9 deletions(-)

diff --git a/docs/examples/config b/docs/examples/config
index e0921b0f..d0b33394 100644
--- a/docs/examples/config
+++ b/docs/examples/config
@@ -249,6 +249,7 @@ video_selfview		window # {window,pip}
 #avcodec_h265enc	libx265
 #avcodec_h265dec	hevc
 #avcodec_hwaccel	vaapi
+#avcodec_profile_level_id 42002a
 
 # ctrl_dbus
 #ctrl_dbus_use	system		# system, session
@@ -281,3 +282,6 @@ video_selfview		window # {window,pip}
 #multicast_call_prio	0
 #multicast_listener	224.0.2.21:50000
 #multicast_listener	224.0.2.21:50002
+
+# avformat
+#avformat_pass_through	yes
diff --git a/include/baresip.h b/include/baresip.h
index d09fd30f..acb278cc 100644
--- a/include/baresip.h
+++ b/include/baresip.h
@@ -1136,6 +1136,9 @@ typedef int (videnc_encode_h)(struct videnc_state *ves, bool update,
 			      const struct vidframe *frame,
 			      uint64_t timestamp);
 
+typedef int (videnc_packetize_h)(struct videnc_state *ves,
+				 const struct vidpacket *packet);
+
 typedef int (viddec_update_h)(struct viddec_state **vdsp,
 			      const struct vidcodec *vc, const char *fmtp);
 typedef int (viddec_decode_h)(struct viddec_state *vds, struct vidframe *frame,
@@ -1154,6 +1157,7 @@ struct vidcodec {
 	viddec_decode_h *dech;
 	sdp_fmtp_enc_h *fmtp_ench;
 	sdp_fmtp_cmp_h *fmtp_cmph;
+	videnc_packetize_h *packetizeh;
 };
 
 void vidcodec_register(struct list *vidcodecl, struct vidcodec *vc);
diff --git a/modules/avcodec/avcodec.c b/modules/avcodec/avcodec.c
index 71ca5d59..714c6f44 100644
--- a/modules/avcodec/avcodec.c
+++ b/modules/avcodec/avcodec.c
@@ -89,6 +89,7 @@ static struct vidcodec h264 = {
 	.dech      = avcodec_decode_h264,
 	.fmtp_ench = avcodec_h264_fmtp_enc,
 	.fmtp_cmph = avcodec_h264_fmtp_cmp,
+	.packetizeh= avcodec_packetize,
 };
 
 static struct vidcodec h264_1 = {
diff --git a/modules/avcodec/avcodec.h b/modules/avcodec/avcodec.h
index deb1354e..7f738cb5 100644
--- a/modules/avcodec/avcodec.h
+++ b/modules/avcodec/avcodec.h
@@ -56,6 +56,7 @@ int avcodec_encode_update(struct videnc_state **vesp,
 			  videnc_packet_h *pkth, void *arg);
 int avcodec_encode(struct videnc_state *st, bool update,
 		   const struct vidframe *frame, uint64_t timestamp);
+int avcodec_packetize(struct videnc_state *st, const struct vidpacket *packet);
 
 
 /*
diff --git a/modules/avcodec/encode.c b/modules/avcodec/encode.c
index ad8d3306..540474d4 100644
--- a/modules/avcodec/encode.c
+++ b/modules/avcodec/encode.c
@@ -2,6 +2,9 @@
  * @file avcodec/encode.c  Video codecs using libavcodec -- encoder
  *
  * Copyright (C) 2010 - 2013 Alfred E. Heggestad
+ * Copyright (C) 2021 by:
+ *     Media Magic Technologies <developer@mediamagictechnologies.com>
+ *     and Divus GmbH <developer@divus.eu>
  */
 #include <re.h>
 #include <rem.h>
@@ -659,3 +662,48 @@ int avcodec_encode(struct videnc_state *st, bool update,
 
 	return err;
 }
+
+
+int avcodec_packetize(struct videnc_state *st, const struct vidpacket *packet)
+{
+	int err = 0;
+	uint64_t ts;
+	struct mbuf mb;
+
+	if (!st || !packet)
+		return EINVAL;
+
+	mb.buf = packet->buf;
+	mb.pos = 0;
+	mb.end = packet->size;
+	mb.size = packet->size;
+
+	ts = video_calc_rtp_timestamp_fix(packet->timestamp);
+
+	switch (st->codec_id) {
+
+	case AV_CODEC_ID_H263:
+		err = h263_packetize(st, ts, &mb, st->pkth, st->arg);
+		break;
+
+	case AV_CODEC_ID_H264:
+		err = h264_packetize(ts, packet->buf, packet->size,
+				     st->encprm.pktsize,
+				     st->pkth, st->arg);
+		break;
+
+#ifdef AV_CODEC_ID_H265
+	case AV_CODEC_ID_H265:
+		err = h265_packetize(ts, packet->buf, packet->size,
+				     st->encprm.pktsize,
+				     st->pkth, st->arg);
+		break;
+#endif
+
+	default:
+		err = EPROTO;
+		break;
+	}
+
+	return err;
+}
diff --git a/modules/avcodec/sdp.c b/modules/avcodec/sdp.c
index 94ece4a9..7ac676ee 100644
--- a/modules/avcodec/sdp.c
+++ b/modules/avcodec/sdp.c
@@ -2,6 +2,9 @@
  * @file avcodec/sdp.c  Video codecs using libavcodec -- SDP functions
  *
  * Copyright (C) 2010 Alfred E. Heggestad
+ * Copyright (C) 2021 by:
+ *     Media Magic Technologies <developer@mediamagictechnologies.com>
+ *     and Divus GmbH <developer@divus.eu>
  */
 
 #include <re.h>
@@ -10,7 +13,7 @@
 #include "avcodec.h"
 
 
-static const uint8_t h264_level_idc = 0x1f;
+static char profile_level_id[256] = "";
 
 
 uint32_t h264_packetization_mode(const char *fmtp)
@@ -33,13 +36,35 @@ int avcodec_h264_fmtp_enc(struct mbuf *mb, const struct sdp_format *fmt,
 			  bool offer, void *arg)
 {
 	struct vidcodec *vc = arg;
-	const uint8_t profile_idc = 0x42; /* baseline profile */
-	const uint8_t profile_iop = 0xe0;
+	uint8_t profile_idc = 0x42; /* baseline profile */
+	uint8_t profile_iop = 0xe0;
+	uint8_t h264_level_idc = 0x1f;
 	(void)offer;
 
 	if (!mb || !fmt || !vc)
 		return 0;
 
+	conf_get_str(conf_cur(), "avcodec_profile_level_id",
+		     profile_level_id, sizeof(profile_level_id));
+
+	if (str_isset(profile_level_id)) {
+		struct pl prof;
+
+		pl_set_str(&prof, profile_level_id);
+		if (prof.l != 6) {
+			warning("avcodec: invalid profile_level_id"
+				" (%r) using default\n",
+				profile_level_id);
+			goto out;
+		}
+
+		prof.l = 2;
+		profile_idc    = pl_x32(&prof); prof.p += 2;
+		profile_iop    = pl_x32(&prof); prof.p += 2;
+		h264_level_idc = pl_x32(&prof);
+	}
+
+ out:
 	return mbuf_printf(mb, "a=fmtp:%s"
 			   " %s"
 			   ";profile-level-id=%02x%02x%02x"
diff --git a/modules/avformat/avformat.c b/modules/avformat/avformat.c
index bc178c36..122eaaee 100644
--- a/modules/avformat/avformat.c
+++ b/modules/avformat/avformat.c
@@ -48,6 +48,7 @@ static enum AVHWDeviceType avformat_hwdevice = AV_HWDEVICE_TYPE_NONE;
 #endif
 static char avformat_inputformat[64];
 static AVCodec *avformat_decoder;
+static char pass_through[256] = "";
 static char rtsp_transport[256] = "";
 
 
@@ -158,7 +159,12 @@ static void *read_thread(void *data)
 				vidts = 1000 * pkt->pts *
 					av_q2d(st->vid.time_base);
 
-				avformat_video_decode(st, pkt);
+				if (st->is_pass_through) {
+					avformat_video_copy(st, pkt);
+				}
+				else {
+					avformat_video_decode(st, pkt);
+				}
 			}
 
 			av_packet_unref(pkt);
@@ -250,6 +256,13 @@ int avformat_shared_alloc(struct shared **shp, const char *dev,
 	st->au.idx  = -1;
 	st->vid.idx = -1;
 
+	conf_get_str(conf_cur(), "avformat_pass_through",
+			  pass_through, sizeof(pass_through));
+
+	if (*pass_through != '\0' && 0==strcmp(pass_through, "yes")) {
+		st->is_pass_through = 1;
+	}
+
 	if (0 == re_regex(dev, str_len(dev), "[^,]+,[^]+", &pl_fmt, &pl_dev)) {
 
 		char format[32];
@@ -290,7 +303,7 @@ int avformat_shared_alloc(struct shared **shp, const char *dev,
 		}
 	}
 
-	if (video && fps) {
+	if (video && fps && !st->is_pass_through) {
 		re_snprintf(buf, sizeof(buf), "%2.f", fps);
 		ret = av_dict_set(&format_opts, "framerate", buf, 0);
 		if (ret != 0) {
diff --git a/modules/avformat/mod_avformat.h b/modules/avformat/mod_avformat.h
index ad8e4919..fdb9f882 100644
--- a/modules/avformat/mod_avformat.h
+++ b/modules/avformat/mod_avformat.h
@@ -15,6 +15,7 @@ struct shared {
 	pthread_t thread;
 	bool is_realtime;
 	bool run;
+	bool is_pass_through;
 
 	struct stream {
 		AVRational time_base;
@@ -45,3 +46,6 @@ int  avformat_video_alloc(struct vidsrc_st **stp, const struct vidsrc *vs,
 			  vidsrc_packet_h *packeth,
 			  vidsrc_error_h *errorh, void *arg);
 void avformat_video_decode(struct shared *st, AVPacket *pkt);
+
+/*add avformat_video_copy function which passes packets to packet handler*/
+void avformat_video_copy(struct shared *st, AVPacket *pkt);
diff --git a/modules/avformat/video.c b/modules/avformat/video.c
index 197d262b..163b4a96 100644
--- a/modules/avformat/video.c
+++ b/modules/avformat/video.c
@@ -2,6 +2,9 @@
  * @file avformat/video.c  libavformat media-source -- video
  *
  * Copyright (C) 2010 - 2020 Alfred E. Heggestad
+ * Copyright (C) 2021 by:
+ *     Media Magic Technologies <developer@mediamagictechnologies.com>
+ *     and Divus GmbH <developer@divus.eu>
  */
 
 #include <re.h>
@@ -17,6 +20,7 @@
 struct vidsrc_st {
 	struct shared *shared;
 	vidsrc_frame_h *frameh;
+	vidsrc_packet_h *packeth;
 	void *arg;
 };
 
@@ -70,6 +74,7 @@ int avformat_video_alloc(struct vidsrc_st **stp, const struct vidsrc *vs,
 		return ENOMEM;
 
 	st->frameh = frameh;
+	st->packeth = packeth;
 	st->arg    = arg;
 
 	if (ctx && *ctx && (*ctx)->id && !strcmp((*ctx)->id, "avformat")) {
@@ -103,6 +108,30 @@ int avformat_video_alloc(struct vidsrc_st **stp, const struct vidsrc *vs,
 }
 
 
+void avformat_video_copy(struct shared *st, AVPacket *pkt)
+{
+	struct vidpacket vp;
+	AVRational tb;
+
+	if (!st || !pkt)
+		return;
+
+	tb = st->vid.time_base;
+
+	vp.buf = pkt->data;
+	vp.size = pkt->size;
+	vp.timestamp = pkt->pts * VIDEO_TIMEBASE * tb.num / tb.den;
+
+	lock_read_get(st->lock);
+
+	if (st->vidsrc_st && st->vidsrc_st->packeth) {
+		st->vidsrc_st->packeth(&vp, st->vidsrc_st->arg);
+	}
+
+	lock_rel(st->lock);
+}
+
+
 void avformat_video_decode(struct shared *st, AVPacket *pkt)
 {
 	AVRational tb;
diff --git a/src/config.c b/src/config.c
index f9d87125..19307223 100644
--- a/src/config.c
+++ b/src/config.c
@@ -1112,6 +1112,7 @@ int config_write_template(const char *file, const struct config *cfg)
 			 "#avformat_hwaccel\tvaapi\n"
 			 "#avformat_inputformat\tmjpeg\n"
 			 "#avformat_decoder\tmjpeg\n"
+			 "#avformat_pass_through\tyes\n"
 			 "#avformat_rtsp_transport\tudp\n");
 
 	if (f)
diff --git a/src/video.c b/src/video.c
index 57f2c201..984cec05 100644
--- a/src/video.c
+++ b/src/video.c
@@ -2,6 +2,9 @@
  * @file src/video.c  Video stream
  *
  * Copyright (C) 2010 Alfred E. Heggestad
+ * Copyright (C) 2021 by:
+ *     Media Magic Technologies <developer@mediamagictechnologies.com>
+ *     and Divus GmbH <developer@divus.eu>
  *
  * \ref GenericVideoStream
  */
@@ -380,7 +383,7 @@ static int packet_handler(bool marker, uint64_t ts,
  * @param timestamp  Frame timestamp in VIDEO_TIMEBASE units
  */
 static void encode_rtp_send(struct vtx *vtx, struct vidframe *frame,
-			    uint64_t timestamp)
+			    struct vidpacket *packet, uint64_t timestamp)
 {
 	struct le *le;
 	int err = 0;
@@ -389,6 +392,23 @@ static void encode_rtp_send(struct vtx *vtx, struct vidframe *frame,
 	if (!vtx->enc)
 		return;
 
+	if (packet) {
+		lock_write_get(vtx->lock_enc);
+
+		if (vtx->vc && vtx->vc->packetizeh) {
+			err = vtx->vc->packetizeh(vtx->enc, packet);
+			if (err)
+				goto out;
+
+			vtx->picup = false;
+		}
+		else {
+			warning("video: Skipping Packet as"
+				" Copy Handler not initialized ..\n");
+		}
+		goto out;
+	}
+
 	lock_write_get(vtx->lock_tx);
 	sendq_empty = (vtx->sendq.head == NULL);
 	lock_rel(vtx->lock_tx);
@@ -468,7 +488,18 @@ static void vidsrc_frame_handler(struct vidframe *frame, uint64_t timestamp,
 	++vtx->stats.src_frames;
 
 	/* Encode and send */
-	encode_rtp_send(vtx, frame, timestamp);
+	encode_rtp_send(vtx, frame, NULL, timestamp);
+}
+
+
+static void vidsrc_packet_handler(struct vidpacket *packet, void *arg)
+{
+	struct vtx *vtx = arg;
+
+	MAGIC_CHECK(vtx->video);
+
+	/* Encode and send */
+	encode_rtp_send(vtx, NULL, packet, packet->timestamp);
 }
 
 
@@ -1146,7 +1177,7 @@ int video_start_source(struct video *v, struct media_ctx **ctx)
 
 		err = vs->alloch(&vtx->vsrc, vs, ctx, &vtx->vsrc_prm,
 				 &vtx->vsrc_size, NULL, v->vtx.device,
-				 vidsrc_frame_handler, NULL,
+				 vidsrc_frame_handler, vidsrc_packet_handler,
 				 vidsrc_error_handler, vtx);
 		if (err) {
 			warning("video: could not set source to"
@@ -1603,7 +1634,7 @@ int video_set_source(struct video *v, const char *name, const char *dev)
 
 	err = vs->alloch(&vtx->vsrc, vs, NULL, &vtx->vsrc_prm,
 			 &vtx->vsrc_size, NULL, dev,
-			 vidsrc_frame_handler, NULL,
+			 vidsrc_frame_handler, vidsrc_packet_handler,
 			 vidsrc_error_handler, vtx);
 	if (err)
 		return err;
-- 
2.25.1

